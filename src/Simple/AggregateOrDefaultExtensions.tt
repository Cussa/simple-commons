<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Simple
{
	public static partial class AggregateOrDefaultExtensions 
	{
<# foreach(var type in new[] { 
	"sbyte", "byte", "char", "short", "ushort", "int", "uint", "long", "ulong",
	"float", "double", "decimal"
}) { #>
		public static <#= type #> SumOrDefault(this IEnumerable<<#= type #>> source)
        {
            return source.SumOrDefault(default(<#= type #>));
        }

        public static <#= type #> SumOrDefault(this IEnumerable<<#= type #>> source, <#= type #> defaultValue)
        {
            var enumerator = source.GetEnumerator();
            if (!enumerator.MoveNext()) return defaultValue;

            <#= type #> sum = enumerator.Current;
            while (enumerator.MoveNext())
                sum += enumerator.Current;
            return sum;
        }

        public static <#= type #> SumOrDefault(this IEnumerable<<#= type #>?> source)
        {
            return source.SumOrDefault(default(<#= type #>));
        }

        public static <#= type #> SumOrDefault(this IEnumerable<<#= type #>?> source, <#= type #> defaultValue)
        {
            return source.Where(x => x != null).Select(x => x ?? default(<#= type #>)).SumOrDefault(defaultValue);
        }
<# } #>
<# foreach(var type in new[] { "Max", "Min" }) { #>
		public static TSource <#= type #>OrDefault<TSource>(this IEnumerable<TSource> source)
           where TSource : IComparable
        {
            return source.<#= type #>OrDefault(default(TSource));
        }

        public static TResult <#= type #>OrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> resultSelector)
            where TResult : IComparable
        {
            return source.Select(resultSelector).<#= type #>OrDefault();
        }

        public static TResult <#= type #>OrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> resultSelector, TResult defaultValue)
           where TResult : IComparable
        {
            return source.Select(resultSelector).<#= type #>OrDefault(defaultValue);
        }

        public static TSource <#= type #>OrDefault<TSource>(this IEnumerable<TSource?> source)
            where TSource : struct, IComparable
        {
            return source.<#= type #>OrDefault(default(TSource));
        }

        public static TResult <#= type #>OrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult?> resultSelector)
          where TResult : struct, IComparable
        {
            return source.Select(resultSelector).<#= type #>OrDefault();
        }

        public static TSource <#= type #>OrDefault<TSource>(this IEnumerable<TSource?> source, TSource defaultValue)
            where TSource : struct, IComparable
        {
            return source.Where(x => x != null).Select(x => x ?? default(TSource)).<#= type #>OrDefault(defaultValue);
        }

        public static TResult <#= type #>OrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult?> resultSelector, TResult defaultValue)
         where TResult : struct, IComparable
        {
            return source.Select(resultSelector).<#= type #>OrDefault(defaultValue);
        }

<# } #>
	}
}